version: '3.9'

services:
  # MySQL
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: appdb
      MYSQL_USER: appuser
      MYSQL_PASSWORD: apppass
    ports:
      - "3307:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: apppass
      POSTGRES_DB: appdb
    ports:
      - "5432:5432"
    volumes:
      - pg-data:/var/lib/postgresql/data
    networks:
      - app-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    restart: unless-stopped

  # Next.js app (Production build)
  nextjs-app:
    build:
      context: ./app/observe-app
      dockerfile: Dockerfile
    ports:
      - "3090:3090"

    working_dir: /app
    environment:
      - NODE_ENV=production
      - PORT=3090
      - HOST=0.0.0.0
    env_file:
      - ./app/observe-app/.env.local
    command: npm run start
    depends_on:
      mysql:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - app-net      
    extra_hosts:
      - "host.docker.internal:host-gateway"
      

volumes:  
  mysql-data:
  pg-data:

networks:
  app-net:
    driver: bridge
  internl: